#!/usr/bin/env bash

# --- Configuración ---
WALLPAPER_DIR="$HOME/wallhypr"
ROFI_THEME="$HOME/.config/rofi/themes/WallSelecthypr.rasi"
LAST_WALLPAPER_PATH_FILE="$HOME/.cache/last_wallpaper_path"
CURRENT_WALLPAPER_LINK="$HOME/.config/current_wallpaper_symlink"

# Configuración de Waybar
WAYBAR_BASE_CONFIG_DIR="$HOME/.config/waybar"
WAYBAR_CONFIG_FILE="$WAYBAR_BASE_CONFIG_DIR/config-hypr"
WAYBAR_THEMES_BASE_DIR="$WAYBAR_BASE_CONFIG_DIR/themes/base"
WAYBAR_THEMES_COLORS_DIR="$WAYBAR_BASE_CONFIG_DIR/themes/colors"
WAYBAR_STYLE_SYMLINK="$WAYBAR_BASE_CONFIG_DIR/style.css"

# Configuración de Rofi para el tema dinámico
ROFI_SHARED_THEMES_DIR="$HOME/.config/rofi/themes/shared"

# Configuración de Dunst
DUNST_CONFIG_DIR="$HOME/.config/dunst"
DUNST_BASE_DIR="$DUNST_CONFIG_DIR/base"
DUNST_FINAL_CONFIG_FILE="$DUNST_CONFIG_DIR/dunstrc"

# Configuración de Kitty
KITTY_CONFIG_DIR="$HOME/.config/kitty"

# Configuración de Hyprland
HYPR_SOURCE_DIR="$HOME/.config/hypr/source"

# Configuración de Hellwal
HELLWAL_TEMPLATES_DIR="$HOME/.config/hellwal/templates"
HELLWAL_TXT_TEMPLATES_DIR="$HOME/.config/hellwal/templates/txt"
HELLWAL_CACHE_DIR="$HOME/.cache/hellwal"

# Opciones de Swww
SWWW_TRANSITION_OPTS=(
    "--transition-type" "wipe"
    "--transition-fps" "60"
    "--transition-duration" "0.7"
)

# --- Función de Uso y Error ---
usage() {
    echo "Uso:"
    echo "  $0 [opciones] -C <ruta_wallpaper> [<nombre_tema>]"
    echo "  $0 [opciones] -CT [<nombre_tema>]"
    echo "  $0 [opciones] -U"
    echo "  $0 [opciones] <nombre_tema>"
    echo ""
    echo "Opciones:"
    echo "  -L : Forzar hellwal a modo CLARO."
    echo "  -D : Usar hellwal en modo OSCURO (por defecto)."
    echo "  -U : Abre Rofi y solo aplica el wallpaper si existe un archivo .txt con el mismo nombre."
    echo "  -N : Ejecutar hellwal con '-m' para un esquema de 16 colores."
    echo "  -T : Ejecutar hellwal con '--skip-term-colors'."
    echo "  -C <ruta> : Especificar la ruta a un wallpaper directamente."
    echo "  -CT : Usar un menú de selección en la terminal."
    echo ""
    echo "Detalles:"
    echo " <nombre_tema> : Especifica qué archivo de directivas usar (ej: 'dark' busca 'dark.txt')."
    exit 1
}

# --- Procesamiento de Opciones ---
hellwal_mode="dark"
use_wallpaper_as_theme=0
run_hellwal_m=0
skip_term_colors=0
waybar_theme_name=""
direct_wallpaper_path=""
use_cli_menu=0

while [[ $# -gt 0 ]]; do
    case "$1" in
        -L) hellwal_mode="light"; shift ;;
        -D) hellwal_mode="dark"; shift ;;
        -U) use_wallpaper_as_theme=1; shift ;;
        -N) run_hellwal_m=1; shift ;;
        -T) skip_term_colors=1; shift ;;
        -C)
            if [ -z "$2" ] || [[ "$2" =~ ^- ]]; then
                echo "Error: La opción -C requiere una ruta de archivo como argumento." >&2; usage;
            fi
            direct_wallpaper_path="$2"; shift 2 ;;
        -CT) use_cli_menu=1; shift ;;
        -*) echo "Error: Opción inválida $1" >&2; usage ;;
        *)
            if [ -z "$waybar_theme_name" ]; then
                waybar_theme_name="$1";
            else
                echo "Error: Se ha especificado más de un nombre de tema ('$waybar_theme_name' y '$1')." >&2; usage;
            fi
            shift ;;
    esac
done

# --- Validación de Argumentos ---
if [ -n "$direct_wallpaper_path" ] && [ "$use_cli_menu" -eq 1 ]; then
    echo "Error: Las opciones -C y -CT son mutuamente excluyentes." >&2; usage;
fi
if [ -n "$waybar_theme_name" ] && [ "$use_wallpaper_as_theme" -eq 1 ]; then
    echo "Error: No puede especificar un <nombre_tema> y usar -U al mismo tiempo." >&2; usage;
fi
if [ -z "$direct_wallpaper_path" ] && [ "$use_cli_menu" -eq 0 ] && [ -z "$waybar_theme_name" ] && [ "$use_wallpaper_as_theme" -eq 0 ]; then
     echo "Error: Debe especificar un método para seleccionar el wallpaper y/o el tema." >&2; usage;
fi

# ... (verificaciones de dependencias omitidas por brevedad) ...

selected_filename=""
wallpaper_path=""

# --- SELECCIÓN DE WALLPAPER ---
if [[ -n "$direct_wallpaper_path" ]]; then
    if [[ ! -f "$direct_wallpaper_path" ]]; then
        echo "Error: El archivo especificado con -C no existe: '$direct_wallpaper_path'" >&2; exit 1;
    fi
    wallpaper_path="$direct_wallpaper_path"; selected_filename=$(basename "$wallpaper_path")
    echo "Opción -C usada. Wallpaper seleccionado: $wallpaper_path"

elif [[ "$use_cli_menu" -eq 1 ]]; then
    echo "Buscando wallpapers en '$WALLPAPER_DIR' para el menú CLI..."
    mapfile -d $'\0' wallpapers_found < <(find "$WALLPAPER_DIR" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.webp" \) -print0 | sort -z)
    if [ ${#wallpapers_found[@]} -eq 0 ]; then echo "Error: No se encontraron wallpapers en $WALLPAPER_DIR." >&2; exit 1; fi
    echo "--- Seleccione un Wallpaper ---"; for i in "${!wallpapers_found[@]}"; do printf "%3d) %s\n" "$((i+1))" "$(basename "${wallpapers_found[$i]}")"; done; echo "-----------------------------"
    while true; do
        read -p "Ingrese el número del wallpaper (o 'q' para salir): " choice
        if [[ "$choice" == "q" || "$choice" == "Q" ]]; then echo "Selección cancelada."; exit 0; fi
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#wallpapers_found[@]}" ]; then
            wallpaper_path=$(echo -n "${wallpapers_found[$((choice-1))]}")
            selected_filename=$(basename "$wallpaper_path"); break;
        else echo "Opción inválida. Por favor, ingrese un número entre 1 y ${#wallpapers_found[@]}."; fi
    done
else
    wallpapers_found=$(find "$WALLPAPER_DIR" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.webp" \) | sort)
    if [ -z "$wallpapers_found" ]; then echo "Error: No se encontraron wallpapers en $WALLPAPER_DIR." >&2; exit 1; fi
    options=""; while IFS= read -r file; do filename=$(basename "$file"); options+="$filename\x00icon\x1f$file\n"; done <<< "$wallpapers_found"
    rofi_prompt_theme_name=${waybar_theme_name:-"Wallpaper Name"}; ORIGINAL_CWD=$(pwd); cd "$HOME" || exit 1
    selected_filename=$(echo -e "$options" | rofi -dmenu -p " Wallpapers (${rofi_prompt_theme_name} / ${hellwal_mode^})" -theme "$ROFI_THEME" -theme-str 'element-icon{size: 450px;}' -theme-str 'element-text{horizontal-align: 0.5;}' -format 's')
    cd "$ORIGINAL_CWD" || exit 1

    if [[ -n "$selected_filename" ]]; then
        if [ "$use_wallpaper_as_theme" -eq 1 ]; then
            theme_name_from_wallpaper=$(basename "$selected_filename" | sed 's/\.[^.]*$//')
            directive_file_to_check="$HELLWAL_TXT_TEMPLATES_DIR/${theme_name_from_wallpaper}.txt"
            if [ ! -f "$directive_file_to_check" ]; then
                echo "Modo -U: No se encontró el archivo de directivas '${directive_file_to_check}' para el wallpaper seleccionado."
                echo "No se realizará ninguna acción."
                exit 0
            fi
        fi
        wallpaper_path="$WALLPAPER_DIR/$selected_filename"
    fi
fi

# --- Procesar Selección ---
if [[ -n "$selected_filename" ]]; then

    if [ "$use_wallpaper_as_theme" -eq 1 ]; then
        waybar_theme_name=$(basename "$wallpaper_path" | sed 's/\.[^.]*$//')
    elif [ -z "$waybar_theme_name" ]; then
        waybar_theme_name=$(basename "$wallpaper_path" | sed 's/\.[^.]*$//')
    fi
    echo "Aplicando '$selected_filename' con tema base '${waybar_theme_name}' y modo Hellwal '${hellwal_mode^}'..."

    swww query >/dev/null || swww init || { echo "Error: swww daemon no pudo iniciarse." >&2; exit 1; }
    sleep 0.5
    echo "$wallpaper_path" > "$LAST_WALLPAPER_PATH_FILE"
    ln -sf "$wallpaper_path" "$CURRENT_WALLPAPER_LINK"

    echo "Generando esquema de colores con hellwal..."
    hellwal_cmd=("hellwal" "-i" "$wallpaper_path")
    [[ "$hellwal_mode" == "light" ]] && hellwal_cmd+=("-l")
    [[ "$run_hellwal_m" -eq 1 ]] && hellwal_cmd+=("-m")
    [[ "$skip_term_colors" -eq 1 ]] && hellwal_cmd+=("--skip-term-colors")
    [ -d "$HELLWAL_TEMPLATES_DIR" ] && hellwal_cmd+=("-f" "$HELLWAL_TEMPLATES_DIR")
    "${hellwal_cmd[@]}"

    directive_file="$HELLWAL_TXT_TEMPLATES_DIR/${waybar_theme_name}.txt"
    mkdir -p "$ROFI_SHARED_THEMES_DIR" "$DUNST_CONFIG_DIR" "$DUNST_BASE_DIR" "$KITTY_CONFIG_DIR" "$HYPR_SOURCE_DIR" "$WAYBAR_THEMES_BASE_DIR" "$WAYBAR_THEMES_COLORS_DIR"

    if [ ! -f "$directive_file" ]; then
        echo "Error: No se encontró el archivo de directivas requerido: '$directive_file'." >&2
        echo "Sugerencia: Verifique que el nombre del tema ('${waybar_theme_name}') sea correcto y que el archivo .txt exista." >&2
        exit 1
    fi

    echo "Directivas: Archivo encontrado en '$directive_file'. Procesando..."
    declare -a auto_commands=() # Usamos un array para almacenar los comandos 'auto'
    dunst_colors_template=""
    dunst_base_template=""

    while IFS= read -r line || [[ -n "$line" ]]; do
        if [[ -z "$line" ]] || [[ "$line" =~ ^\s*# ]]; then continue; fi
        key=$(echo "$line" | cut -d'=' -f1 | tr -d '[:space:]' | sed 's/\s.*$//' | tr '[:lower:]' '[:upper:]' | head -c 1)$(echo "$line" | cut -d'=' -f1 | tr -d '[:space:]' | sed 's/\s.*$//' | tr '[:upper:]' '[:lower:]' | tail -c +2)
        value=$(echo "$line" | cut -d'=' -f2 | sed 's/^\s*//' | sed 's/\s*$//')
        if [ -z "$key" ] || [ -z "$value" ]; then
            echo "Advertencia: Línea mal formada en '$directive_file': $line" >&2; continue;
        fi
        case "$key" in
            Auto)
                echo "Auto: Comando en cola -> '$value'"
                auto_commands+=("$value")
                ;;
            Launcher|Powermenu|Clipboard)
                key_lower=$(echo "$key" | tr '[:upper:]' '[:lower:]'); value_base=$(echo "$value" | sed 's/\.rasi$//'); target_symlink_name=""
                if [[ "$key_lower" == "launcher" ]]; then target_symlink_name="colorshypr.rasi"; fi; if [[ "$key_lower" == "powermenu" ]]; then target_symlink_name="power.rasi"; fi; if [[ "$key_lower" == "clipboard" ]]; then target_symlink_name="clipboard.rasi"; fi
                source_rasi_file="$HELLWAL_CACHE_DIR/${value_base}.rasi"; target_symlink_path="$ROFI_SHARED_THEMES_DIR/$target_symlink_name"
                if [ -f "$source_rasi_file" ]; then echo "Rofi: Enlazando ($key_lower): '$target_symlink_path' -> '$source_rasi_file'"; ln -sf "$source_rasi_file" "$target_symlink_path"; else echo "Advertencia: Hellwal no generó el archivo de Rofi para '$key_lower': '$source_rasi_file'." >&2; fi ;;
            Waybarbase)
                source_waybar_base_file="$WAYBAR_THEMES_BASE_DIR/$value"
                if [ -f "$source_waybar_base_file" ]; then echo "Waybar (Base): Enlazando '$WAYBAR_STYLE_SYMLINK' -> '$source_waybar_base_file'"; ln -sf "$source_waybar_base_file" "$WAYBAR_STYLE_SYMLINK"; else echo "Advertencia (Waybar): No se encontró el archivo base '$source_waybar_base_file'." >&2; fi ;;
            Waycolor)
                colors_definition_file="$WAYBAR_THEMES_COLORS_DIR/colors.txt"
                if [ -f "$colors_definition_file" ]; then
                    target_css_name=$(grep -E "^\s*${value}\s*=" "$colors_definition_file" | cut -d'=' -f2 | sed 's/^\s*//' | sed 's/\s*$//')
                    if [ -n "$target_css_name" ]; then
                        source_color_file="$HELLWAL_CACHE_DIR/$target_css_name"; target_color_symlink="$WAYBAR_BASE_CONFIG_DIR/colors.css"
                        if [ -f "$source_color_file" ]; then echo "Waybar (Color): Enlazando '$target_color_symlink' -> '$source_color_file'"; ln -sf "$source_color_file" "$target_color_symlink"; else echo "Advertencia (Waybar): Hellwal no generó el archivo de color '$source_color_file'." >&2; fi
                    else echo "Advertencia (Waybar): No se encontró la definición para '$value' en '$colors_definition_file'." >&2; fi
                else echo "Advertencia (Waybar): No se encontró el archivo de definición de colores '$colors_definition_file'." >&2; fi ;;
            Dunst) dunst_colors_template="$value" ;;
            Dunstbase) dunst_base_template="$value" ;;
            Kitty)
                source_kitty_file="$HELLWAL_CACHE_DIR/$value"; target_kitty_symlink="$KITTY_CONFIG_DIR/kitty.conf"
                if [ -f "$source_kitty_file" ]; then echo "Kitty: Enlazando '$target_kitty_symlink' -> '$source_kitty_file'"; ln -sf "$source_kitty_file" "$target_kitty_symlink"; else echo "Advertencia (Kitty): Hellwal no generó el archivo especificado: '$source_kitty_file'." >&2; fi ;;
            Border)
                target_filename=$(echo "$key" | tr '[:upper:]' '[:lower:]').conf; source_file="$HELLWAL_CACHE_DIR/$value"; target_symlink="$HYPR_SOURCE_DIR/$target_filename"
                if [ -f "$source_file" ]; then echo "Hyprland ($key): Enlazando '$target_symlink' -> '$source_file'"; ln -sf "$source_file" "$target_symlink"; else echo "Advertencia (Hyprland): Hellwal no generó el archivo para '$key': '$source_file'." >&2; fi ;;
            *) echo "Advertencia: Clave desconocida '$key' en '$directive_file'. Saltando." >&2 ;;
        esac
    done < "$directive_file"

    if [ -n "$dunst_colors_template" ] && [ -n "$dunst_base_template" ]; then
        echo "Dunst: Procesando directivas 'dunst' y 'dunstbase'..."
        source_base_file="$DUNST_BASE_DIR/$dunst_base_template"; source_colors_file="$HELLWAL_CACHE_DIR/$dunst_colors_template"
        if [ -f "$source_base_file" ] && [ -f "$source_colors_file" ]; then
            echo "Dunst: Creando archivo de config final en '$DUNST_FINAL_CONFIG_FILE'..."
            cat "$source_base_file" > "$DUNST_FINAL_CONFIG_FILE"; echo -e "\n# --- Colores generados por Hellwal ---" >> "$DUNST_FINAL_CONFIG_FILE"; cat "$source_colors_file" >> "$DUNST_FINAL_CONFIG_FILE";
        else
            [ ! -f "$source_base_file" ] && echo "Advertencia (Dunst): No se encontró el archivo base '$source_base_file'." >&2
            [ ! -f "$source_colors_file" ] && echo "Advertencia (Dunst): Hellwal no generó el archivo de colores '$source_colors_file'." >&2
        fi
    elif [ -n "$dunst_colors_template" ] || [ -n "$dunst_base_template" ]; then
        echo "Advertencia (Dunst): Se encontró la directiva 'dunst' o 'dunstbase', pero no ambas." >&2;
    fi

    # --- Ejecución de comandos 'auto' ---
    if [ ${#auto_commands[@]} -gt 0 ]; then
        echo "Ejecutando ${#auto_commands[@]} comando(s) 'auto' en cola..."
        for cmd in "${auto_commands[@]}"; do
            echo "-> Exec: $cmd"
            # Usamos 'eval' para interpretar ~, redirecciones, etc. y manejamos errores.
            eval "$cmd" || echo "Advertencia: El comando 'auto' falló con un error: $cmd" >&2
            sleep 0.2 # Pequeña pausa para evitar saturación.
        done
    fi

    # --- SECCIÓN DE REINICIO ---
    echo "Aplicando cambios y reiniciando servicios..."
    swww img "$wallpaper_path" "${SWWW_TRANSITION_OPTS[@]}"
    hyprctl reload

    pkill waybar
    sleep 0.3
    waybar -c "$WAYBAR_CONFIG_FILE" &

    if command -v dunst &> /dev/null; then
        pkill dunst
        sleep 0.1
        dunst &
    fi

    if command -v kitty &> /dev/null; then
        kitty @ set-colors --all --configured "$KITTY_CONFIG_DIR/kitty.conf"
    fi

    echo "Proceso completado."

else
    if ! [ "$use_cli_menu" -eq 1 ] && ! [ -n "$direct_wallpaper_path" ] && [ -z "$selected_filename" ]; then
        echo "Selección de wallpaper cancelada."
    fi
fi
